Nesse texto estarei estudando a respeito de 
APIs(Application Programming Interface), API Rest e afins na área
de TI(Tecnologia da Informação).

APIs são padrões de interfaces programáveis que facilitam a criação de 
plataformas, essas sendo aplicativos, complementos, scripts e webhooks.
Esses padrões estão presentes em diversos lugares, um exemplo simples são
apps feitos para android que utilizam padrões do sistema operacional. Isso
se extende para outras plataformas, existem APIs para grandes sites como
o Twitter/X usadas para criar scripts e aplicações que complementam a
experiência de uso do mesmo, é uma relação majoritáriamente cooperativa
apesar de suas nuances e termos relacionados a pagamento de royalties e 
tokens.

Da mesma forma que drivers permitem que softwares usem subsistemas de 
hardware sem precisar saber de cada detalhe operacional do mesmo, APIs
desempenham funções parecidas, usando funcionalidades do PC(Personal Computer) 
e do sistema operacional sem necessáriamente precisar acompanhar todos 
os detalhes de operação da CPU(Central Processing Unit) ou 
da plataforma usada.

APIs são conjuntos de padrões e normas a seguir para comunicação com sistemas 
diversos, podemos compreender como aplicação programável à interfaces. Através
delas podemos criar aplicações e extensões para aplicativos já existentes 
economizando o tempo de os desenvolver do zero, já que com elas ja temos
estruturas prontas para uso. A função principal de APIs é facilitar o trabalho
de programadores com economia de tempo, já que corta a necessidade de criar
códigos personalizados para cada função do aplicativo que criam.

A seguir, um exemplo de funcionalidades escrito por Curt Franklin e
Chris Pollette no site www.howstuffworks.com e traduzido por mim:

"Vamos ver um exemplo de criar um arquivo num HDD(Hard Disk Drive) para
vermos o porquê isso pode ser importante.

Um programador escrevendo uma aplicação para armazenar dados de um
instrumento cientifico pode querer permitir o cientista de especificar
o nome do arquivo criado. O sistema operacional pode prover uma função
API chamada "MakeFile" para criar arquivos. Enquanto escreve o programa, o 
desenvolvedor usaria uma linha que se parece com isso:

MakeFile[1, %Name,2]

Nesse exemplo, a instrução diz ao sistema operacional para criar um arquivo
que permitirá acesso aleatório de seus dados(sinalizado pelo 1 - a outra
opção poderia ser 0 para um arquivo serial(Um tipo de arquivo sequêncial
que consiste de multiplos armazenamentos de dados com o mesmo espaço na 
memória.)), terá um nome digitado pelo usuário(%Name) e ocupará um espaço
variável dependendo de quantos dados estão guardados no arquivo(Indicado 
pelo 2 - outras opções podem ser 0 para um tamanho fixo, e 1 para um
tipo de arquivo que usa mais espaço quanto mais dados são adicionados mas
não usa menos espaço quando esses dados são removidos). Agora, vejamos o que
o sistema operacional faz para transformar essa instrução em ação.

O sistema operacional manda uma instrução para o HDD para identificar a
localização do primeiro espaço livre de armazenamento.

Com essa informação, o sistema operacional cria uma entrada no sistema de
arquivos mostrando a locação inicial e final do mesmo arquivo, o nome,
o tipo de arquivo, se o arquivo foi armazenado, que usuários tem permissão
de olhar ou modificar o arquivo e por fim a data e horário de criação do
arquivo."

O uso da API para armazenamento em disco torna o trabalho do programador mais
simples e dinâmico, a necessidade de acompanhar instruções, códigos responsivos
e tipagem de dados é nulificada, deixando o desenvolvedor com mais tempo para
outras tarefas. Uma parte do trabalho é delegada ao sistema operacional, o 
mesmo conectado a diversas subrotinas do hardware vai lidar com os detalhes
operacionais e detalhes repentinos do hardware. O programador passa a precisar
apenas escrever seu código na API e o sistema operacional cuidará do resto.

Mesmo com essas vantagens, é necessário ressaltar que o acesso aos softwares
que APIs oferecem pode ser uma fraqueza de segurança e pode oferecer vantagem
para hackers usarem a aplicação por benefício próprio ou até ganhar acesso
a computadores pessoais de terceiros. De toda forma, isso não quer dizer que
o uso de APIs é ruim, ele mantém sua utilidade mas ao mesmo tempo devemos
enfatizar a necessidade de identificar vulnerabilidades e corrigir elas
conforme forem detectadas. Da mesma forma que são inerentemente vulneráveis,
APIs de forma contraditória também são poderosas ferramentas para a segurança
digital, já que as mesmas podem bloquear acesso e permissões à dados de
softwares importantes e hardwares essenciais.

Existem essencialmente quatro tipos de APIs que são definidos pelas suas
políticas de compartilhamento e uso. A seguir quatro definições dos tipos
de API a partir dessas políticas descritas pelo blog do site www.syndle.com:

1. APIs públicas ou abertas
As APIs públicas são também conhecidas como APIs abertas e estão disponíveis 
para outros usuários ou programadores utilizarem com restrições mínimas ou, 
em alguns casos, de forma totalmente acessível.

2. APIs privadas ou internas
As APIs privadas ou internas são ocultadas aos usuários externos e são 
expostas apenas para os sistemas internos de uma organização. São utilizadas
para o desenvolvimento interno da empresa, otimizando a produtividade e a 
reutilização dos serviços.

3. APIs de parceiros de negócio
As APIs de parceiros comerciais são aquelas que são expostas entre os 
membros de um acordo comercial. Uma vez que não estão disponíveis para 
todos, é necessária uma autorização especial para sua utilização.

4. APIs compostas
As APIs compostas utilizam diferentes dados ou APIs de serviços e permitem 
aos programadores acessar múltiplos pontos finais.




Vemos que APIs se tornaram um pilar da programação e desenvolvimento moderno,
a industria percebeu e adotou seu potencial nos ultimos anos, tornando APIs
em uma das áreas mais competitivas e contestadas da história dos computadores
e da internet. Empresas notaram a capacidade de controlar e lucrar dessa
parte da industria que os desenvolvedores tem usando suas APIs; Ao prover
aplicações gratuitas, os desenvolvedores esperam um maior uso de seus
softwares por parte do publico, ainda que esperem que outros desenvolvedores
paguem royalties para poder usar seus softwares com intuito de criar
ferramentas uteis para os usuários, enquanto outros disponibilizam suas APIs
livremente.
